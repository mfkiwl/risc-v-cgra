$date
	Fri Mar 21 09:34:29 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_register_system $end
$var wire 32 ! data_out2 [31:0] $end
$var wire 32 " data_out1 [31:0] $end
$var reg 1 # clk $end
$var reg 32 $ data_in [31:0] $end
$var reg 1 % rdwrite $end
$var reg 1 & read_en $end
$var reg 1 ' reg_select $end
$var reg 1 ( reset $end
$var reg 5 ) selRD [4:0] $end
$var reg 5 * selRS1 [4:0] $end
$var reg 5 + selRS2 [4:0] $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 32 , data_in [31:0] $end
$var wire 1 % rdwrite $end
$var wire 1 & read_en $end
$var wire 1 ' reg_select $end
$var wire 1 ( reset $end
$var wire 5 - selRD [4:0] $end
$var wire 5 . selRS1 [4:0] $end
$var wire 5 / selRS2 [4:0] $end
$var wire 32 0 data_out2 [31:0] $end
$var wire 32 1 data_out1 [31:0] $end
$scope begin reg_block[0] $end
$var parameter 2 2 i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 3 data_in [31:0] $end
$var wire 1 4 r_enable $end
$var wire 1 5 reset $end
$var reg 32 6 data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[1] $end
$var parameter 2 7 i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 8 data_in [31:0] $end
$var wire 1 9 r_enable $end
$var wire 1 : reset $end
$var reg 32 ; data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[2] $end
$var parameter 3 < i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 = data_in [31:0] $end
$var wire 1 > r_enable $end
$var wire 1 ? reset $end
$var reg 32 @ data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[3] $end
$var parameter 3 A i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 B data_in [31:0] $end
$var wire 1 C r_enable $end
$var wire 1 D reset $end
$var reg 32 E data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[4] $end
$var parameter 4 F i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 G data_in [31:0] $end
$var wire 1 H r_enable $end
$var wire 1 I reset $end
$var reg 32 J data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[5] $end
$var parameter 4 K i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 L data_in [31:0] $end
$var wire 1 M r_enable $end
$var wire 1 N reset $end
$var reg 32 O data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[6] $end
$var parameter 4 P i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 Q data_in [31:0] $end
$var wire 1 R r_enable $end
$var wire 1 S reset $end
$var reg 32 T data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[7] $end
$var parameter 4 U i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 V data_in [31:0] $end
$var wire 1 W r_enable $end
$var wire 1 X reset $end
$var reg 32 Y data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[8] $end
$var parameter 5 Z i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 [ data_in [31:0] $end
$var wire 1 \ r_enable $end
$var wire 1 ] reset $end
$var reg 32 ^ data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[9] $end
$var parameter 5 _ i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 ` data_in [31:0] $end
$var wire 1 a r_enable $end
$var wire 1 b reset $end
$var reg 32 c data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[10] $end
$var parameter 5 d i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 e data_in [31:0] $end
$var wire 1 f r_enable $end
$var wire 1 g reset $end
$var reg 32 h data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[11] $end
$var parameter 5 i i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 j data_in [31:0] $end
$var wire 1 k r_enable $end
$var wire 1 l reset $end
$var reg 32 m data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[12] $end
$var parameter 5 n i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 o data_in [31:0] $end
$var wire 1 p r_enable $end
$var wire 1 q reset $end
$var reg 32 r data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[13] $end
$var parameter 5 s i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 t data_in [31:0] $end
$var wire 1 u r_enable $end
$var wire 1 v reset $end
$var reg 32 w data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[14] $end
$var parameter 5 x i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 y data_in [31:0] $end
$var wire 1 z r_enable $end
$var wire 1 { reset $end
$var reg 32 | data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[15] $end
$var parameter 5 } i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 ~ data_in [31:0] $end
$var wire 1 !" r_enable $end
$var wire 1 "" reset $end
$var reg 32 #" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[16] $end
$var parameter 6 $" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 %" data_in [31:0] $end
$var wire 1 &" r_enable $end
$var wire 1 '" reset $end
$var reg 32 (" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[17] $end
$var parameter 6 )" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 *" data_in [31:0] $end
$var wire 1 +" r_enable $end
$var wire 1 ," reset $end
$var reg 32 -" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[18] $end
$var parameter 6 ." i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 /" data_in [31:0] $end
$var wire 1 0" r_enable $end
$var wire 1 1" reset $end
$var reg 32 2" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[19] $end
$var parameter 6 3" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 4" data_in [31:0] $end
$var wire 1 5" r_enable $end
$var wire 1 6" reset $end
$var reg 32 7" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[20] $end
$var parameter 6 8" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 9" data_in [31:0] $end
$var wire 1 :" r_enable $end
$var wire 1 ;" reset $end
$var reg 32 <" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[21] $end
$var parameter 6 =" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 >" data_in [31:0] $end
$var wire 1 ?" r_enable $end
$var wire 1 @" reset $end
$var reg 32 A" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[22] $end
$var parameter 6 B" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 C" data_in [31:0] $end
$var wire 1 D" r_enable $end
$var wire 1 E" reset $end
$var reg 32 F" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[23] $end
$var parameter 6 G" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 H" data_in [31:0] $end
$var wire 1 I" r_enable $end
$var wire 1 J" reset $end
$var reg 32 K" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[24] $end
$var parameter 6 L" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 M" data_in [31:0] $end
$var wire 1 N" r_enable $end
$var wire 1 O" reset $end
$var reg 32 P" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[25] $end
$var parameter 6 Q" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 R" data_in [31:0] $end
$var wire 1 S" r_enable $end
$var wire 1 T" reset $end
$var reg 32 U" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[26] $end
$var parameter 6 V" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 W" data_in [31:0] $end
$var wire 1 X" r_enable $end
$var wire 1 Y" reset $end
$var reg 32 Z" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[27] $end
$var parameter 6 [" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 \" data_in [31:0] $end
$var wire 1 ]" r_enable $end
$var wire 1 ^" reset $end
$var reg 32 _" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[28] $end
$var parameter 6 `" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 a" data_in [31:0] $end
$var wire 1 b" r_enable $end
$var wire 1 c" reset $end
$var reg 32 d" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[29] $end
$var parameter 6 e" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 f" data_in [31:0] $end
$var wire 1 g" r_enable $end
$var wire 1 h" reset $end
$var reg 32 i" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[30] $end
$var parameter 6 j" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 k" data_in [31:0] $end
$var wire 1 l" r_enable $end
$var wire 1 m" reset $end
$var reg 32 n" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin reg_block[31] $end
$var parameter 6 o" i $end
$scope module reg_inst $end
$var wire 1 # clock $end
$var wire 32 p" data_in [31:0] $end
$var wire 1 q" r_enable $end
$var wire 1 r" reset $end
$var reg 32 s" data_out [31:0] $end
$upscope $end
$upscope $end
$scope module demux $end
$var wire 32 t" data_in [31:0] $end
$var wire 5 u" sel [4:0] $end
$var reg 32 v" out_1 [31:0] $end
$var reg 32 w" out_10 [31:0] $end
$var reg 32 x" out_11 [31:0] $end
$var reg 32 y" out_12 [31:0] $end
$var reg 32 z" out_13 [31:0] $end
$var reg 32 {" out_14 [31:0] $end
$var reg 32 |" out_15 [31:0] $end
$var reg 32 }" out_16 [31:0] $end
$var reg 32 ~" out_17 [31:0] $end
$var reg 32 !# out_18 [31:0] $end
$var reg 32 "# out_19 [31:0] $end
$var reg 32 ## out_2 [31:0] $end
$var reg 32 $# out_20 [31:0] $end
$var reg 32 %# out_21 [31:0] $end
$var reg 32 &# out_22 [31:0] $end
$var reg 32 '# out_23 [31:0] $end
$var reg 32 (# out_24 [31:0] $end
$var reg 32 )# out_25 [31:0] $end
$var reg 32 *# out_26 [31:0] $end
$var reg 32 +# out_27 [31:0] $end
$var reg 32 ,# out_28 [31:0] $end
$var reg 32 -# out_29 [31:0] $end
$var reg 32 .# out_3 [31:0] $end
$var reg 32 /# out_30 [31:0] $end
$var reg 32 0# out_31 [31:0] $end
$var reg 32 1# out_32 [31:0] $end
$var reg 32 2# out_4 [31:0] $end
$var reg 32 3# out_5 [31:0] $end
$var reg 32 4# out_6 [31:0] $end
$var reg 32 5# out_7 [31:0] $end
$var reg 32 6# out_8 [31:0] $end
$var reg 32 7# out_9 [31:0] $end
$upscope $end
$scope module mux $end
$var wire 1 & read_en $end
$var wire 1 ' reg_select $end
$var wire 5 8# selrs1 [4:0] $end
$var wire 5 9# selrs2 [4:0] $end
$var wire 32 :# in_9 [31:0] $end
$var wire 32 ;# in_8 [31:0] $end
$var wire 32 <# in_7 [31:0] $end
$var wire 32 =# in_6 [31:0] $end
$var wire 32 ># in_5 [31:0] $end
$var wire 32 ?# in_4 [31:0] $end
$var wire 32 @# in_32 [31:0] $end
$var wire 32 A# in_31 [31:0] $end
$var wire 32 B# in_30 [31:0] $end
$var wire 32 C# in_3 [31:0] $end
$var wire 32 D# in_29 [31:0] $end
$var wire 32 E# in_28 [31:0] $end
$var wire 32 F# in_27 [31:0] $end
$var wire 32 G# in_26 [31:0] $end
$var wire 32 H# in_25 [31:0] $end
$var wire 32 I# in_24 [31:0] $end
$var wire 32 J# in_23 [31:0] $end
$var wire 32 K# in_22 [31:0] $end
$var wire 32 L# in_21 [31:0] $end
$var wire 32 M# in_20 [31:0] $end
$var wire 32 N# in_2 [31:0] $end
$var wire 32 O# in_19 [31:0] $end
$var wire 32 P# in_18 [31:0] $end
$var wire 32 Q# in_17 [31:0] $end
$var wire 32 R# in_16 [31:0] $end
$var wire 32 S# in_15 [31:0] $end
$var wire 32 T# in_14 [31:0] $end
$var wire 32 U# in_13 [31:0] $end
$var wire 32 V# in_12 [31:0] $end
$var wire 32 W# in_11 [31:0] $end
$var wire 32 X# in_10 [31:0] $end
$var wire 32 Y# in_1 [31:0] $end
$var reg 32 Z# data_out1 [31:0] $end
$var reg 32 [# data_out2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11111 o"
b11110 j"
b11101 e"
b11100 `"
b11011 ["
b11010 V"
b11001 Q"
b11000 L"
b10111 G"
b10110 B"
b10101 ="
b10100 8"
b10011 3"
b10010 ."
b10001 )"
b10000 $"
b1111 }
b1110 x
b1101 s
b1100 n
b1011 i
b1010 d
b1001 _
b1000 Z
b111 U
b110 P
b101 K
b100 F
b11 A
b10 <
b1 7
b0 2
$end
#0
$dumpvars
bx [#
bx Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
b0 v"
b0 u"
b0 t"
b0 s"
1r"
xq"
bx p"
b0 n"
1m"
xl"
bx k"
b0 i"
1h"
xg"
bx f"
b0 d"
1c"
xb"
bx a"
b0 _"
1^"
x]"
bx \"
b0 Z"
1Y"
xX"
bx W"
b0 U"
1T"
xS"
bx R"
b0 P"
1O"
xN"
bx M"
b0 K"
1J"
xI"
bx H"
b0 F"
1E"
xD"
bx C"
b0 A"
1@"
x?"
bx >"
b0 <"
1;"
x:"
bx 9"
b0 7"
16"
x5"
bx 4"
b0 2"
11"
x0"
bx /"
b0 -"
1,"
x+"
bx *"
b0 ("
1'"
x&"
bx %"
b0 #"
1""
x!"
bx ~
b0 |
1{
xz
bx y
b0 w
1v
xu
bx t
b0 r
1q
xp
bx o
b0 m
1l
xk
bx j
b0 h
1g
xf
bx e
b0 c
1b
xa
bx `
b0 ^
1]
x\
bx [
b0 Y
1X
xW
bx V
b0 T
1S
xR
bx Q
b0 O
1N
xM
bx L
b0 J
1I
xH
bx G
b0 E
1D
xC
bx B
b0 @
1?
x>
bx =
b0 ;
1:
x9
bx 8
b0 6
15
x4
b0 3
bx 1
bx 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
1(
0'
0&
0%
b0 $
0#
bx "
bx !
$end
#5000
0q"
0l"
0g"
0b"
0]"
0X"
0S"
0N"
0I"
0D"
0?"
0:"
05"
00"
0+"
0&"
0!"
0z
0u
0p
0k
0f
0a
0\
0W
0R
0M
0H
0C
0>
09
04
1#
#10000
b10100101101001011010010110100101 3
b10100101101001011010010110100101 v"
b10100101101001011010010110100101 t"
05
0:
0?
0D
0I
0N
0S
0X
0]
0b
0g
0l
0q
0v
0{
0""
0'"
0,"
01"
06"
0;"
0@"
0E"
0J"
0O"
0T"
0Y"
0^"
0c"
0h"
0m"
0r"
0#
1%
b10100101101001011010010110100101 $
b10100101101001011010010110100101 ,
0(
#15000
b10100101101001011010010110100101 6
b10100101101001011010010110100101 Y#
14
1#
#20000
b0 3
b0 v"
b0 t"
0#
0%
#25000
04
1#
#30000
b1011010010110100101101001011010 t"
b1011010010110100101101001011010 y
b1011010010110100101101001011010 |"
0#
1%
b1011010010110100101101001011010 $
b1011010010110100101101001011010 ,
b1110 )
b1110 -
b1110 u"
#35000
b1011010010110100101101001011010 |
b1011010010110100101101001011010 S#
1z
1#
#40000
b0 y
b0 |"
b0 t"
b1011010010110100101101001011010 !
b1011010010110100101101001011010 0
b1011010010110100101101001011010 [#
b10100101101001011010010110100101 "
b10100101101001011010010110100101 1
b10100101101001011010010110100101 Z#
0#
b1110 +
b1110 /
b1110 9#
1'
0%
1&
#45000
0z
1#
#50000
b10010001101000101011001111000 t"
b10010001101000101011001111000 p"
b10010001101000101011001111000 1#
bx !
bx 0
bx [#
bx "
bx 1
bx Z#
0#
0'
1%
b10010001101000101011001111000 $
b10010001101000101011001111000 ,
b11111 )
b11111 -
b11111 u"
0&
#55000
b10010001101000101011001111000 s"
b10010001101000101011001111000 @#
1q"
1#
#60000
b0 p"
b0 1#
b10010001101000101011001111000 "
b10010001101000101011001111000 1
b10010001101000101011001111000 Z#
b0 t"
0#
b11111 *
b11111 .
b11111 8#
1&
0%
#65000
0q"
1#
#70000
b10000111011001010100001100100001 t"
bx "
bx 1
bx Z#
b10000111011001010100001100100001 o
b10000111011001010100001100100001 z"
0#
1'
1%
b10000111011001010100001100100001 $
b10000111011001010100001100100001 ,
0&
b1100 )
b1100 -
b1100 u"
#75000
b10000111011001010100001100100001 r
b10000111011001010100001100100001 U#
1p
1#
#80000
b0 o
b0 z"
b10000111011001010100001100100001 !
b10000111011001010100001100100001 0
b10000111011001010100001100100001 [#
b10010001101000101011001111000 "
b10010001101000101011001111000 1
b10010001101000101011001111000 Z#
b0 t"
0#
b1100 +
b1100 /
b1100 9#
1&
0%
#85000
0p
1#
#90000
0#
#95000
1#
#100000
0#
